# Configuration file for Paradise Labs Denizen library
# Best way to access this file is via the pl-config.dsc
#   - Example: define xp_cost_per_torch <proc[pl__config].context[light-chunk.torch.xp_points]>

light-chunk:
  torch:
      # How many XP for every torch placed: 10 was a bit high, as it ogten to 8 torches to fill a chunk
      # which is almost level 6. Even t level 25 only afew chunks could be filled
      xp_points: 5
  mobcount:
      # How many XP for every torch placed
      xp_points: 90


simple-inventory:
  feeder:
    # Feeder location data (trigger) is proccessed every x ticks where the x is calculated
    # by a simple hash that when moded by tick_delay being zero the feeder is processed.
    #   Use 0 to fire every tick, useful for debugging
    #   10 for one stack per feeder per 0.5 seconds (the others seem WAY to fast for our game)
    #    5 for one stack per feeder per 0.25 seconds
    #   NOTE: If players game this by just doubling the feeders, we may need to deal wth that somehow.
    #   But if reasonable complaints arrive we can just set tick delay per to 5
    tick_delay: 10

    # TODO:  maximum number of slots that can be moved per pass from each feeder
    #max_slots: 1

    # Maximum items that is allowed to be transfered per pass. Normally maximum slot size is 64
    max_quantity: 64

    # Minimum and maximum distance
    #   Use 0 to disable, but there is still a safety to prevent recursion even on double chests
    #   Use a minium of .5 to prevent a feeder placing items into self if also an inventory (no longer necessary)
    #   Use a 1 to prevent macthing NSEWUP of container
    #   Use 1 .5 to also prevent diaganols, which can help make the setup more consistent. From a human perspective 1 block shoudl includ diagnols
    min_distance: 0

    # THis is a block radius as a cuboid. It should be around 2x the bed-shunk plugins range (5)
    # so a chest on one end of a base can reach the other without goign across the world.
    #   Radisu of 5 chunks menas a base that can be 11 chunks by 11 chunks. Each chunk is 16 so 176
    #   blocks. And that is a radius. So feeders operate in a  radius 10 meaning 11x11 (which is the entire chunk vertically. I might need to fix that)
    max_distance: 176

    # Maximum runtime before issuing a wait (there is 50ms oer tick) expressed in ms
    max_runtime: 10

    # How long to wait after reaching max_runtime
    wait_time: 1t

    # list order. Users will need to force this into a list:
    #       ....get[list_order].as[list]
    # Feeders should NOT be in tis list, those are handled seperately
    list_order: item|wildcard|overflow_item|overflow_wildcard|overflow_fallback|unknown

helpers:
  # How many blocks to search around Farmer (radius) for a valid copomster/chest, nearest wins
  # - NPCs bascially get close enough to touch the composter, making this distance short speeds up scan
  search_radius: 4
  # How close must tbe player be to the villager to trigger NPC, this helps prevents random npcs from being converted
  player_radius: 10
  # How many ms farm should stay highlighted, not done in ticks so that the highlight can be cleare don server restarts
  highlight_duration: 10000


  # ***
  # *** Defaults are used as a fallback if a path is not found in the chosen profession.
  # *** Note some callers may use a single path to fetch the entire hierarchy (for example uniform). Such
  # *** callers will FAIL to pick up the defaults.
  # *** WARING: Lists (not key/value) cannot be merged and are always a set, for that reason do NOT include
  # *** lists in default. In general avoid maps as well except for status which will always be fetched directly by
  # *** parth by status.<key>
  # 
  # OVERRIDE these in the professions.<key> using a keypath like this `key-path: value`. Note the value will REPLAVE the entire
  # data at the key-path.
  #   - Override a single key in a nested hierarchy
  #     - status.working.message: '<red>Mining ...'
  #   - Override an entire hierarchiy
  #     - status: ... the entire status key is replaced ...
  #
  profession_default:

    enabled: true

    # Tool durability is in one of two eays. An integer whcih is the points to adjust
    # and a < 1 whcih is a probaility of removing 1 point. So 3 is always looses 3 durability
    # and 0.75 is a 75% chance on each use of using 1 durabiulity.
    # For a 1 durability a hoe can harvest approx:
    #   - Stone Hoe : approx 7 stacks of carrots/potatoes/etc.
    #   - Iton Hoe : approx 15 stacks
    tool_duability_loss: 0.50

    # Normally enchanted should be refused by NPC, otherwise an accidental drop of yourr awesome tool may get picked up
    enchanted_allowed: false

    # How long to wait betweein AI runs per NPC, make a prime number to help distrinbute load
    ai_wait_time: 13t

    # How long to wait between each worker iteration, too quik and farmer is spastic and LAGS, 1-5s is good. An be expresse din ticks as well (20t)
    wait_time: 2s

    # Maximum radius of Farm
    farm_radius_max: 32


    # *** Messages
    # Delay in MS for scrolling to next message
    status_message_delay: 40
    status_emotion_delay: 10

    # Messages for each status. Multiple messages are possible list and they will slowly "scroll" in the name area
    # The emotion maps to a special effects (see code)
    status:
      # *** These usually need to be overridden (at least the 'messages:' key)
      working:
        messages:
          - <gold>Working ...
        emotion: none

      need_item:
        messages:
          - <yellow>Please give me a tool
          - <red>Waiting ...
        emotion: confused

      # *** Generic messages, useful 
      finishing_work:
        messages:
          - <yellow>Be right with you
          - <yellow>Finsishing a job
        emotion: love

      unloading:
        messages:
          - <yellow>Unloading inventory
        emotion: none

      following:
        messages:
          - <yellow>Where we going boss?
          - <yellow>Following you
        emotion: love

      farm_scan:
        messages:
          - <yellow>Looking for farm boundries
          - <yellow>Scanning ...
        emotion: gratitude

      farm_broken:
        messages:
          - <red>Farm seems broken/incomplete
          - <red>Scanning ...
        emotion: angry

      thank_you:
        messages:
          - <yellow>Thank you!
        emotion: gratitude

      invalid_item:
        messages:
          - <yellow>I can't use enchanted items
        emotion: confused

      navigate_failed:
        messages:
          - <red>I am stuck
          - <red>Fix route or use leed to move me
        emotion: confused


  professions:
    # Name MUST match a valid minecraft profession name
    farmer:
        enabled: true

        # If dropped in farm NPC will refresh using this item. Existing item is LOST. 
        #   This can be automated with a crafter, dropper and a long life timer
        tool_match: "*_hoe"

        # Valid chests : normally only chests are allowed as (without Simple Inventory) there is no other way to empty inventory
        uniform:
          head:
            type: air
            #color: 153,102,51
          chest:
            type: air
            #color: 102,204,102
          legs:
            type: leather_leggings
            color: 153,102,51
          boots:
            type: leather_boots
            color: 102,51,0

        # *** INTERNAL, changing this will probably break things
        # BLOCK name, this is not always obvious 
        #   - plant: <name of item that is used to plant this> - inetrally one is deducted from NPC inventory to simulaye planting (but if not present wills till get planted)
        #     - use 'none' for NO planting, like pumpkin or other vines
        #   - drops: [name:quantity, ...] : Optional, lists the extar drops with optional :quantity. Mostly used for special items like vines which
        #   normally do not drop anyting on the 'break' action.
        crops:
          wheat:
            plant: wheat_seeds
          carrots:
            plant: carrot
          potatoes:
            plant: potatoe
          nether_wart:
            plant: nether_wart
          beetroots:
            plant: beetroot_seeds
          cocoa:
            plant: cocoa_beans
          pumpkin:
            plant: none
          brown_mushroom:
            plant: none
          red_mushroom:
            plant: none
          melon:
            plant: none
          vine:
            plant: none
            drops: [vine]

        # In this case we look at the farm substratrate NOT the block growing
        # Originally we looked at the block growing but this is more flexible
        # and only requires the player plant melons and cocoa as those turn the
        # ground to dirt. But this means that STONE under jungle logs will NOT
        # be detected as a farm, BUT dirt will. Grass is NOT allowed, suggested
        # to use farmland.
        #  Use '_crops_' to include the crops in the block slist (in which case y_offset is best at 0)
        valid_farm:
          trigger: composter
          substrate: stone_bricks
          # Internal logic pretty much says this is allthat really works
          chest: chest
          y_offset: -1
          blocks:
            - farmland
            - dirt
            - podzol
            - mycelium
            - nylium
            - soul_sand

        
        # Message specific to farming, most messages are generic so only a few typically need changing
        status.working.messages: 
          - <gold>Farming ...

        status.need_item.messages: 
          - <yellow>Please drop me a hoe
          - <red>Waiting ...


    # TODO: SKCTECH OF Lumberjack - NOT implemented
    # TODO: Create a simple inheritence, done a config loading IF we can alter YAML data once loaded to expand
    # and fill in missing data with template
    lumberjack:
        enabled: false
        tool_match: "*_axe"
        enchanted_allowed: false

        uniform:
          head:
            type: leather_helmet
            color: 204,0,0
          chest:
            type: leather_chestplate
            color: 153,0,0
          legs: 
            type: leather_leggings
            color: 64,64,64
          boots:
            type: leather_boots
            color: 51,34,0

         # *** INTERNAL, changing this will probably break things
        # BLOCK name, this is not always obvious 
        #   - plant: <name of item that is used to plant this> - inetrally one is deducted from NPC inventory to simulaye planting (but if not present wills till get planted)
        #     - use 'none' for NO planting, like pumpkin or other vines
        #   - the system replaces the WOOD BLOCk that is on the ground with a sapling when then wood block is removed. So 2x2 will work fine
        crops:
          oak:
            - plant: oak_sapling
          spruce:
            - plant: spruce_sapling
          birch:
            - plant: birch_sapling
          jungle:
            - plant: jungle_sapling
          acacia:
            - plant: acacia_sapling
          dark_oak:
            - plant: dark_oak_sapling
          mangrove:
            # No sapling
            - plant: mangrove
          cherry:
            - plant: cherry_sapling

        valid_farm:
          trigger: composter
          substrate: "*_log"
          # Internal logic pretty much says this is allthat really works
          chest: chest
          y_offset: -1
          blocks:
            - grass
            - dirt
            - podzol
            - mycelium
            - nylium
            - water


    # TODO placeholder
    miner:
      enabled: false
      tool_match: "*_axe"
      enchanted_allowed: false

      uniform:
        head:
          type: iron_helmet
        chest: 
          type: leather_chestplate
          color: 64,64,64
        legs:
           type: leather_leggings
           color: 32,32,32
        boots:
          type:  chainmail_boots

    # TODO placeholder
    builder:
      enabled: false
      uniform:
          head:
            type: golden_helmet
          chest:
            type: leather_chestplate
            color: 255,255,0
          legs: 
            type: leather_leggings
            color: 51,51,255
          boots:
            type: leather_boots
            color: 102,51,0

    # TODO placeholder
    demolition:
      enabled: false
      uniform:
        head:
          type: leather_helmet
          color: 255,0,0
        chest:
          type: leather_chestplate
          color: 255,69,0
        legs:
          type: iron_leggings
        boots:
          type: iron_boots
